AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Simple PLan Budget Service
Parameters:
  CognitoDomain:
    Type: String
    Description: A name for the cognito Domain
    Default: "simple_plan"

  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment

  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
      - local
      - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.

Conditions:
  DeployCloudFront: !Equals
    - !Ref FrontendDeployment
    - remote

Globals:
  Function:
    Timeout: 20

  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn
Resources:
  #-----------------------------------------------------
  # Cognito Configuration for user management
  #-----------------------------------------------------

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !If
          - DeployCloudFront
          - !Sub "https://${CloudfrontDistribution.DomainName}"
          - http://localhost:8000
      LogoutURLs:
        - !If
          - DeployCloudFront
          - !Sub "https://${CloudfrontDistribution.DomainName}"
          - http://localhost:8000
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref UserPool

  #-----------------------------------------------------
  # CloudFront Configuration
  #-----------------------------------------------------

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Condition: DeployCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless frontend website'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: DeployCloudFront
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !Sub "${S3Bucket}.s3.us-east-2.amazonaws.com"
            OriginPath: /static
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployCloudFront
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  AccessDynamoDBTablesRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'WriteToCloudWatch'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: 'AccessBudgetTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/Budget'
        - PolicyName: 'AccessUsersTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/Users'
        - PolicyName: 'AccessExpensesTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/Expenses'
  CreateBudgetLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: Simple-Plan
      Handler: com.nashss.se.simple_plan.lambda.CreateBudgetLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /budget
            Method: post

  CreateCategoryLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: Simple-Plan
      Handler: com.nashss.se.simple_plan.lambda.CreateCategoryLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /category
            Method: post

  CreateExpenseLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: Simple-Plan
      Handler: com.nashss.se.simple_plan.lambda.CreateExpenseLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /expense
            Method: post

  GetSingleExpenseLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: Simple-Plan
      Handler: com.nashss.se.simple_plan.lambda.GetSingleExpenseLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /expense/{expenseId}
            Method: get
    #-----------------------------------------------------------------

    BudgetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "Budgets"
        KeySchema:
          - AttributeName: "budgetName"
            KeyType: "HASH"
        AttributeDefinitions:
          - AttributeName: "budgetName"
            AttributeType: "S"
          - AttributeName: "totalIncome"
            AttributeType: "N"
          - AttributeName: "totalExpenses"
            AttributeType: "N"
          - AttributeName: "totalBudgeted"
            AttributeType: "N"
          - AttributeName: "fundsAvailable"
            AttributeType: "N"
        BillingMode: "PAY_PER_REQUEST"
        GlobalSecondaryIndexes:
          - IndexName: "ExpenseByCategoryIndex"
            KeySchema:
              - AttributeName: "category"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
          - IndexName: "ExpenseByDateIndex"
            KeySchema:
              - AttributeName: "date"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"

    ExpensesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "Expenses"
        KeySchema:
         - AttributeName: "expenseId"
           KeyType: "HASH"
        AttributeDefinitions:
         - AttributeName: "amount"
           AttributeType: "N"
         - AttributeName: "category"
           AttributeType: "S"
         - AttributeName: "date"
           AttributeType: "S"
         - AttributeName: "note"
           AttributeType: "S"
           BillingMode: "PAY_PER_REQUEST"

      #-----------------------------------------------------
      # The outputs defined below will be printed
      #  to the screen after a successful deploy
      #-----------------------------------------------------

      Outputs:

        CognitoUserPoolId:
          Value: !Ref UserPool
          Description: "The Cognito User Pool ID (COGNITO_USER_POOL_ID)."
        CognitoUserPoolClientId:
          Value: !Ref UserPoolClient
          Description: "The Cognito User Pool Client ID (COGNITO_USER_POOL_CLIENT_ID)."
        CognitoDomain:
          Value: !Sub "${CognitoDomain}.auth.us-east-2.amazoncognito.com"
          Description: "The Cognito Domain (COGNITO_DOMAIN)."

        ApiBaseUrl:
          Description: "API Gateway endpoint base URL for Prod stage (API_BASE_URL)."
          Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

        CognitoRedirectSignin:
          Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNIN)."
          Value: !Sub "https://${CloudfrontDistribution.DomainName}"
          Condition: DeployCloudFront
        CognitoRedirectSignout:
          Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNOUT)."
          Value: !Sub "https://${CloudfrontDistribution.DomainName}"
          Condition: DeployCloudFront